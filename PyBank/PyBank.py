{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid character in identifier (<ipython-input-2-6ced4b0339e2>, line 79)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-6ced4b0339e2>\"\u001b[0;36m, line \u001b[0;32m79\u001b[0m\n\u001b[0;31m    output_file_path = “budget_data.txt”\u001b[0m\n\u001b[0m                                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character in identifier\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import csv\n",
    "\n",
    "pybank_csv = os.path.join(\"..\", \"Instructions\" , \"PyBank\", \"Resources\", \"budget_data.csv\")\n",
    "\n",
    "with open(pybank_csv, newline=\"\") as csvfile:\n",
    "    csvreader = csv.reader(csvfile, delimiter=\",\")\n",
    "    csv_header = next(csvreader)\n",
    "    \n",
    "    #print(csv_header)\n",
    "    \n",
    "    dates = []\n",
    "    profit_loss = []\n",
    "    change = [] # diff in profit_loss\n",
    "    change_alt = []\n",
    "    previous = 0\n",
    "    \n",
    "    for row in csvreader:\n",
    "        dates.append(row[0])\n",
    "        profit_loss.append(row[1])\n",
    "        \n",
    "      #diff in first row of P&L and previous row  \n",
    "        diff = int(row[1]) - int(previous)\n",
    "        previous = row[1]\n",
    "        change.append(diff)\n",
    "        \n",
    "        #print(change)\n",
    "        \n",
    "    budget = zip(dates, change)\n",
    "    budget_new = list(budget)\n",
    "    #print(budget_new)\n",
    "    \n",
    "    change.remove(change[0])\n",
    "    #print(change)\n",
    "    budget_new.remove(budget_new[0])\n",
    "    #print(budget_new)\n",
    "    \n",
    "    \n",
    "    #to find total months in dataset\n",
    "    total_months = len(dates)\n",
    "    #print(total_months)\n",
    "    \n",
    "    #to find net total\n",
    "    net_total = sum(map(int, profit_loss))\n",
    "    #print(net_total)\n",
    "    \n",
    "    #to find average of changes in P&L\n",
    "    ave_chge = sum(change)/len(change)\n",
    "    #print(ave_chge)\n",
    "    \n",
    "    inc_profit = max(change)\n",
    "    dec_loss = min(change)\n",
    "    inc_date = 0\n",
    "    dec_date = 0\n",
    "    \n",
    "    #print(inc_profit)\n",
    "    #print(dec_loss)\n",
    "    \n",
    "    for row in budget_new:\n",
    "        if row[1] == inc_profit:\n",
    "            inc_date = row[0]\n",
    "        if row[1] == dec_loss:\n",
    "            dec_date = row[0]\n",
    "            \n",
    "    \n",
    "        \n",
    "        \n",
    "    print(f\"Financial Analysis\")\n",
    "    print(f\"_____________________________\")\n",
    "    print(f\"Total Months: {total_months}\")\n",
    "    print(f\"Net Total : ${net_total}\")\n",
    "    print(f\"Average Change: ${ave_chge}\")\n",
    "    print(f\"Greatest Increase in Profits: {inc_date} ({inc_profit})\")\n",
    "    print(f\"Greatest Decrease in Profits: {dec_date} ({dec_loss})\")\n",
    "    \n",
    "    \n",
    "        \n",
    "    #output file\n",
    "    output_file_path = “budget_data.txt”\n",
    "    #open file in write mode\n",
    "    outFile = open(output_file_path, “w+“)\n",
    "    # function to write output in console and file\n",
    "    def printOutput(vLine):\n",
    "     print(vLine)\n",
    "     outFile.write(vLine)\n",
    "     outFile.write(“\\n”)    \n",
    "        \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    \n",
    "        \n",
    "     \n",
    "        \n",
    "       \n",
    "\n",
    "    \n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
